const express = require("express");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const User = require("../models/User");

const router = express.Router();
const jwtSecret = process.env.JWT_SECRET;

// ‚úÖ Registro de Usu√°rio
router.post("/register", async (req, res) => {
    try {
        const { username, password } = req.body;
        const trimmedUsername = username.trim(); // ‚úÖ Remove espa√ßos extras

        // ‚úÖ Verifica se o usu√°rio j√° existe
        const existingUser = await User.findOne({ username: trimmedUsername });
        if (existingUser) {
            return res.status(400).json({ message: "‚ùå Usu√°rio j√° cadastrado." });
        }

        // ‚úÖ Cria√ß√£o do novo usu√°rio com senha criptografada
        const hashedPassword = await bcrypt.hash(password.trim(), 10);
        const newUser = new User({ username: trimmedUsername, password: hashedPassword });
        await newUser.save();

        res.json({ message: "‚úÖ Usu√°rio registrado com sucesso!" });
    } catch (error) {
        console.error("‚ùå Erro ao registrar usu√°rio:", error);
        res.status(500).json({ message: "‚ùå Erro interno no servidor." });
    }
});

// ‚úÖ Login de Usu√°rio
router.post("/login", async (req, res) => {
    try {
        const { username, password } = req.body;
        const trimmedUsername = username.trim();
        const user = await User.findOne({ username: trimmedUsername });

        console.log(`üîç Buscando usu√°rio: ${trimmedUsername}`);
        console.log("‚úÖ Usu√°rio encontrado:", user);


        if (!user) {
            console.log("‚ùå Usu√°rio n√£o encontrado!");
            return res.status(401).json({ message: "‚ùå Usu√°rio n√£o encontrado." });

        }
        console.log(`‚úÖ Usu√°rio encontrado: ${user.username}`);

        const validPassword = await bcrypt.compare(password.trim(), user.password);
        console.log(`üõ† Compara√ß√£o de senha: ${validPassword}`);

        if (!validPassword) {
            return res.status(401).json({ message: "‚ùå Senha incorreta." });
        }

        // ‚úÖ Gera o token corretamente
        const token = jwt.sign({ username: user.username, id: user._id }, process.env.JWT_SECRET, { expiresIn: "1h" });

        res.json({ message: "‚úÖ Login bem-sucedido!", token });
    } catch (error) {
        console.error("‚ùå Erro ao realizar login:", error);
        res.status(500).json({ message: "‚ùå Erro interno no login." });
    }
});

// ‚úÖ Middleware de autentica√ß√£o JWT
function authenticateToken(req, res, next) {
    const authHeader = req.headers["authorization"];
    const token = authHeader && authHeader.split(" ")[1];

    if (!token) {
        return res.status(401).json({ message: "‚ùå Acesso negado! Token n√£o encontrado." });
    }

    jwt.verify(token, jwtSecret, (err, decoded) => {
        if (err) {
            return res.status(403).json({ message: "‚ùå Token inv√°lido!" });
        }
        req.user = decoded;
        next();
    });
}

// ‚úÖ Perfil do Usu√°rio (Rota Protegida)
router.get("/profile", authenticateToken, async (req, res) => {
    try {
        const user = await User.findById(req.user.id).select("-password");

        if (!user) {
            return res.status(404).json({ message: "‚ùå Usu√°rio n√£o encontrado." });
        }

        res.json(user);
    } catch (error) {
        console.error("‚ùå Erro ao buscar perfil do usu√°rio:", error);
        res.status(500).json({ message: "‚ùå Erro interno ao buscar perfil." });
    }
});

module.exports = router;
